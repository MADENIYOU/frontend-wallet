# Résumé de la Discussion : Intégration de Keycloak (IAM) dans le Projet

Ce document récapitule les points clés de notre discussion concernant l'intégration de Keycloak et ses implications pour les équipes Frontend, Backend et IAM/Sécurité.

---

## 1. Comprendre `/.well-known/openid-configuration`

### Qu'est-ce que c'est ?
C'est un endpoint standardisé (une URL spécifique) qui, lorsqu'il est interrogé, retourne un document JSON. Ce document contient toutes les informations nécessaires (URLs des endpoints, clés publiques, etc.) pour qu'une application cliente (votre frontend) puisse interagir avec le fournisseur d'identité (Keycloak) en utilisant le protocole OpenID Connect (OIDC).

### Impact pour le Frontend :
*   **Découverte Automatique :** Votre application n'a pas besoin de "hardcoder" les URLs de Keycloak. Elle les découvre dynamiquement en lisant ce fichier. Cela rend l'intégration plus robuste et facile à maintenir.
*   **Standardisation :** Permet à votre application de suivre les standards OIDC pour l'authentification.

---

## 2. Comparaison des Flux d'Authentification

### Flux Traditionnel (Sans Keycloak) :
*   **Frontend :** Collecte username/password, les envoie au Backend.
*   **Backend :** Vérifie username/password dans sa propre base de données, génère une session/token, le renvoie au Frontend.
*   **Problèmes :** Chaque application gère son authentification, complexité, risques de sécurité (gestion des mots de passe, MFA, etc.).

### Flux avec Keycloak (OpenID Connect / OAuth 2.0) :
*   **Keycloak (Géré par IAM) :** Devient le fournisseur d'identité (IdP) et le serveur d'autorisation. Il gère les utilisateurs, les mots de passe, la MFA, les politiques de sécurité. Il peut interroger un annuaire ou une base de données d'utilisateurs (cette interaction est interne à Keycloak).
*   **Frontend :** Ne collecte **jamais** les mots de passe. Il orchestre le flux d'authentification en redirigeant l'utilisateur vers Keycloak.
*   **Backend :** Ne gère **plus** l'authentification. Il devient un "serveur de ressources" qui valide les tokens d'accès émis par Keycloak.

---

## 3. Rôles des Équipes et Interactions

### Équipe IAM/Sécurité :
*   Déploie et configure Keycloak.
*   Gère les utilisateurs, les rôles, les politiques de sécurité (MFA, complexité des mots de passe).
*   Expose le `/.well-known/openid-configuration`.
*   Fournit les `client_id` et `redirect_uri` pour l'application frontend.
*   Définit la stratégie d'inscription (auto-inscription Keycloak ou API de création d'utilisateur).

### Équipe Frontend (Vous) :
*   **Connexion :**
    *   **Ne soumet PAS les identifiants directement au backend.**
    *   **Redirige le navigateur de l'utilisateur vers la page de connexion de Keycloak** (`authorization_endpoint`).
    *   Après authentification réussie par Keycloak, reçoit un `code d'autorisation`.
    *   Échange ce `code d'autorisation` avec Keycloak (`token_endpoint`) pour obtenir des **tokens** (Access Token, ID Token, Refresh Token).
    *   Stocke ces tokens de manière sécurisée.
    *   **Ajoute l'Access Token à toutes les requêtes** vers le Backend (dans l'en-tête `Authorization: Bearer <Access_Token>`).
*   **Inscription :**
    *   Si formulaire personnalisé (votre cas) : Collecte les données, les envoie à votre Backend (`auth/register`).
    *   Si auto-inscription Keycloak : Redirige l'utilisateur vers la page d'inscription de Keycloak.
*   Appelle les APIs métier du Backend (ex: `users/me`) en incluant l'Access Token.

### Équipe Backend :
*   **Ne stocke PLUS les mots de passe.**
*   **Ne gère PLUS l'authentification directe.**
*   **Valide les Access Tokens** reçus du Frontend (en faisant confiance à Keycloak et en vérifiant la signature du token avec les clés publiques de Keycloak via le `jwks_uri`).
*   Extrait l'identité de l'utilisateur et ses rôles du token validé.
*   Applique la logique métier et l'autorisation basée sur l'identité extraite.
*   Gère les données spécifiques à l'application (non gérées par Keycloak).
*   **Pour l'inscription (si formulaire personnalisé) :** Reçoit les données du Frontend, puis appelle l'API de création d'utilisateur de Keycloak pour créer le compte.

---

## 4. Gestion des Endpoints Spécifiques (`auth/login`, `auth/register`, `users/me`)

### `auth/login` :
*   **Frontend :** N'appelle plus `auth/login` sur le Backend. Il redirige vers Keycloak.
*   **Backend :** Cet endpoint devient obsolète ou est réaffecté à d'autres usages (ex: validation de token si le Backend est un client OIDC lui-même, mais pas pour la soumission d'identifiants).

### `auth/register` :
*   **Frontend :** Si vous avez un formulaire d'inscription personnalisé, le Frontend envoie les données à `auth/register` sur votre Backend.
*   **Backend :** Reçoit les données, effectue des validations métier si nécessaire, puis **appelle l'API de gestion des utilisateurs de Keycloak** pour créer le compte. Il agit comme un proxy/orchestrateur.

### `users/me` :
*   **Frontend :** Appelle `users/me` sur le Backend **en incluant l'Access Token**.
*   **Backend :** Reçoit la requête, **valide l'Access Token**, extrait l'identité de l'utilisateur, récupère les données spécifiques à l'application pour cet utilisateur depuis sa propre base de données, et les renvoie au Frontend.

---

## 5. Cas Particulier : Imposer un Formulaire de Connexion Codé par le Frontend (ROPC)

### Fonctionnement :
*   **Frontend :** Code un formulaire de connexion complet, collecte username/password.
*   **Frontend :** Envoie directement username/password au `token_endpoint` de Keycloak (avec `grant_type=password`).
*   **Keycloak :** Vérifie les identifiants et renvoie les tokens directement au Frontend.

### Pourquoi c'est Déconseillé :
*   **Risque de Sécurité Accru :** Le Frontend manipule directement les identifiants, augmentant le risque de vol.
*   **Pas de MFA :** Le flux ROPC ne supporte pas la Multi-Factor Authentication.
*   **Pas de gestion des mots de passe oubliés/réinitialisation :** Le Frontend ne peut pas initier ces flux.
*   **Pas de Social Login :** Ne permet pas l'intégration avec des fournisseurs d'identité tiers.
*   **Complexité pour le Frontend :** Doit gérer toutes les erreurs d'authentification.

### Recommandation :
Si cette approche est imposée, il est crucial de discuter avec l'équipe IAM des raisons et des alternatives plus sécurisées (personnalisation de la page Keycloak, utilisation d'un WebView pour la connexion). Le flux de redirection (Authorization Code Flow with PKCE) est le standard sécurisé pour les applications mobiles.
